# version: '3.8' # Docker Compose file format

services:
  frontend:
  build: ./frontend
  container_name: frontend_app
  ports:
    - "3000:80"
    depends_on:
      - backend
    environment:
      # Used in the React build (REACT_APP_* are injected at build time)
      REACT_APP_API_URL: http://backend:${BACKEND_PORT}/api

  backend:
    build: ./backend # Build image from backend Dockerfile
    container_name: backend_api
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}" # Expose backend API
    volumes:
      - ./backend:/usr/src/app # Mount backend code for live updates
      - /usr/src/app/node_modules # Prevent host node_modules from overwriting container's
    depends_on:
      - database
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: database
      DB_PORT: ${DB_PORT}
      PORT: ${BACKEND_PORT}

  database:
    image: postgres:13-alpine
    container_name: postgres_db
    ports:
      - "${DB_PORT}:${DB_PORT}" # Optional: expose to host
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro # Optional init script
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  db_data:
    driver: local
